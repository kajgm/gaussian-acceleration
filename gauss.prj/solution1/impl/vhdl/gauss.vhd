-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gauss is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_we0 : OUT STD_LOGIC;
    X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gauss is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gauss_gauss,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.350000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.342000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1385,HLS_SYN_LUT=1402,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (70 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (70 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (70 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (70 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (70 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (70 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (70 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (70 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (70 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (70 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (70 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv63_F : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_2_reg_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_1_reg_256 : STD_LOGIC_VECTOR (62 downto 0);
    signal empty_14_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state18_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state48_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state60_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln33_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state22_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_state52_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_pp1_stage5_11001 : BOOLEAN;
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state47_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state59_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln15_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_reg_688 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_693 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln13_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_333_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_addr_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_addr_reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_fu_360_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln17_reg_716 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln15_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_load_1_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln17_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bitcast_ln17_1_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_reg_746 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_406_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln18_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_756_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_5_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_5_reg_770_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reuse_select_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state19_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln20_1_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state23_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal add_ln18_fu_476_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln18_reg_790 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state28_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal B_addr_2_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln15_1_fu_492_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_1_reg_800 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln22_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal bitcast_ln22_1_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln30_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_1_fu_513_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln30_2_fu_536_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln30_2_reg_829 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln30_1_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_1_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln32_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_addr_reg_844 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_552_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln33_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_855_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp17_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp17_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal reuse_select18_fu_600_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select18_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state49_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal bitcast_ln35_1_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_fu_616_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln33_reg_889 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_pp1_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage11 : signal is "none";
    signal ap_block_state58_pp1_stage11_iter0 : BOOLEAN;
    signal ap_block_pp1_stage11_11001 : BOOLEAN;
    signal add_ln30_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_reg_894 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal bitcast_ln37_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state50_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state50 : STD_LOGIC;
    signal ap_block_pp1_stage11_subdone : BOOLEAN;
    signal indvars_iv28_reg_199 : STD_LOGIC_VECTOR (4 downto 0);
    signal norm_reg_211 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_1_reg_223 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_phi_mux_col_2_phi_fu_237_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal row_reg_244 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_phi_mux_col_1_phi_fu_260_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln22_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_1_cast4_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg14_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg13_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_2_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_reuse_reg13_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal reuse_addr_reg_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_2_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_reuse_reg_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal bitcast_ln37_1_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_pp1_stage6 : BOOLEAN;
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_341_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln_fu_364_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_11_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_1_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal empty_13_fu_548_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_16_fu_570_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage11 : BOOLEAN;
    signal add_ln37_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state24_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state25_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state26_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_state27_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ap_block_state51_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_block_state53_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal ap_block_state54_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_pp1_stage7_subdone : BOOLEAN;
    signal ap_block_pp1_stage7_11001 : BOOLEAN;
    signal ap_block_state55_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_pp1_stage8_subdone : BOOLEAN;
    signal ap_block_pp1_stage8_11001 : BOOLEAN;
    signal ap_block_state56_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_pp1_stage9_subdone : BOOLEAN;
    signal ap_block_pp1_stage9_11001 : BOOLEAN;
    signal ap_block_state57_pp1_stage10_iter0 : BOOLEAN;
    signal ap_block_pp1_stage10_subdone : BOOLEAN;
    signal ap_block_pp1_stage10_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gauss_fsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gauss_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gauss_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_7_full_dsp_1_U1 : component gauss_fsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => reg_302,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component gauss_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U3 : component gauss_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        din1 => grp_fu_287_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state50) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_const_boolean_0 = ap_block_pp1_stage11_subdone)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                col_1_reg_256 <= ap_const_lv63_F;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                col_1_reg_256 <= add_ln33_reg_889;
            end if; 
        end if;
    end process;

    col_2_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                col_2_reg_234 <= zext_ln13_reg_693;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_2_reg_234 <= add_ln18_reg_790;
            end if; 
        end if;
    end process;

    empty_14_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                empty_14_reg_268 <= bitcast_ln32_fu_544_p1;
            elsif (((icmp_ln33_reg_855_pp1_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                empty_14_reg_268 <= reg_307;
            end if; 
        end if;
    end process;

    indvars_iv28_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv28_reg_199 <= ap_const_lv5_1;
            elsif (((icmp_ln15_fu_354_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv28_reg_199 <= add_ln13_fu_387_p2;
            end if; 
        end if;
    end process;

    norm_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                norm_reg_211 <= ap_const_lv4_0;
            elsif (((icmp_ln15_fu_354_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                norm_reg_211 <= add_ln15_reg_688;
            end if; 
        end if;
    end process;

    reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
                reg_292 <= A_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
                reg_292 <= A_q1;
            end if; 
        end if;
    end process;

    reuse_addr_reg14_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_513_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                reuse_addr_reg14_fu_78 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln33_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                reuse_addr_reg14_fu_78 <= zext_ln30_reg_818;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reuse_addr_reg_fu_86 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln18_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                reuse_addr_reg_fu_86 <= zext_ln20_1_fu_447_p1;
            end if; 
        end if;
    end process;

    reuse_reg13_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_513_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                reuse_reg13_fu_82 <= ap_const_lv32_0;
            elsif (((icmp_ln33_reg_855_pp1_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                reuse_reg13_fu_82 <= bitcast_ln35_2_fu_622_p1;
            end if; 
        end if;
    end process;

    reuse_reg_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reuse_reg_fu_90 <= ap_const_lv32_0;
            elsif (((icmp_ln18_reg_756_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                reuse_reg_fu_90 <= bitcast_ln20_2_fu_482_p1;
            end if; 
        end if;
    end process;

    row_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_1_reg_223 <= indvars_iv28_reg_199;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                row_1_reg_223 <= add_ln15_1_reg_800;
            end if; 
        end if;
    end process;

    row_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_reg_244 <= ap_const_lv5_F;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                row_reg_244 <= add_ln30_reg_894;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_addr_5_reg_770 <= zext_ln20_1_fu_447_p1(8 - 1 downto 0);
                addr_cmp_reg_765 <= addr_cmp_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_addr_5_reg_770_pp0_iter1_reg <= A_addr_5_reg_770;
                icmp_ln18_reg_756 <= icmp_ln18_fu_413_p2;
                icmp_ln18_reg_756_pp0_iter1_reg <= icmp_ln18_reg_756;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                A_addr_reg_708 <= zext_ln22_fu_349_p1(8 - 1 downto 0);
                B_addr_reg_703 <= zext_ln13_fu_328_p1(4 - 1 downto 0);
                    tmp_2_reg_698(7 downto 4) <= tmp_2_fu_333_p3(7 downto 4);
                    zext_ln13_reg_693(3 downto 0) <= zext_ln13_fu_328_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                A_load_1_reg_731 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                B_addr_2_reg_795 <= zext_ln15_reg_746(4 - 1 downto 0);
                add_ln15_1_reg_800 <= add_ln15_1_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                X_addr_reg_844 <= zext_ln30_reg_818(4 - 1 downto 0);
                    tmp_4_reg_849(7 downto 4) <= tmp_4_fu_552_p3(7 downto 4);
                    zext_ln30_1_reg_834(4 downto 0) <= zext_ln30_1_fu_540_p1(4 downto 0);
                    zext_ln30_2_reg_829(4 downto 0) <= zext_ln30_2_fu_536_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln15_reg_688 <= add_ln15_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln18_reg_790 <= add_ln18_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                add_ln30_reg_894 <= add_ln30_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage11_11001))) then
                add_ln33_reg_889 <= add_ln33_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                addr_cmp17_reg_869 <= addr_cmp17_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln33_reg_855 <= icmp_ln33_fu_565_p2;
                icmp_ln33_reg_855_pp1_iter1_reg <= icmp_ln33_reg_855;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_297 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_302 <= grp_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_307 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_312 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                reuse_select18_reg_874 <= reuse_select18_fu_600_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                reuse_select_reg_775 <= reuse_select_fu_460_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    shl_ln_reg_751(7 downto 4) <= shl_ln_fu_406_p3(7 downto 4);
                    zext_ln15_reg_746(4 downto 0) <= zext_ln15_fu_402_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln17_reg_716 <= trunc_ln17_fu_360_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_513_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    zext_ln30_reg_818(4 downto 0) <= zext_ln30_fu_521_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_693(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_2_reg_698(3 downto 0) <= "0000";
    zext_ln15_reg_746(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_751(3 downto 0) <= "0000";
    zext_ln30_reg_818(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_2_reg_829(62 downto 5) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_834(7 downto 5) <= "000";
    tmp_4_reg_849(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, icmp_ln33_reg_855, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, icmp_ln13_fu_316_p2, ap_CS_fsm_state3, icmp_ln15_fu_354_p2, icmp_ln18_fu_413_p2, ap_CS_fsm_state45, tmp_1_fu_513_p3, ap_block_pp0_stage0_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage11_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone, ap_block_pp1_stage6_subdone, ap_block_pp1_stage7_subdone, ap_block_pp1_stage8_subdone, ap_block_pp1_stage9_subdone, ap_block_pp1_stage10_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln15_fu_354_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_413_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_413_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state45 => 
                if (((tmp_1_fu_513_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((not(((icmp_ln33_reg_855 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                elsif (((icmp_ln33_reg_855 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_pp1_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                end if;
            when ap_ST_fsm_pp1_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, A_addr_reg_708, ap_CS_fsm_state3, A_addr_5_reg_770_pp0_iter1_reg, ap_CS_fsm_state61, ap_block_pp0_stage0, zext_ln20_1_fu_447_p1, zext_ln37_fu_642_p1, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            A_address0 <= zext_ln37_fu_642_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            A_address0 <= A_addr_5_reg_770_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_address0 <= zext_ln20_1_fu_447_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= A_addr_reg_708;
        else 
            A_address0 <= "XXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state3, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln17_fu_372_p1, zext_ln20_fu_428_p1, zext_ln35_fu_579_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            A_address1 <= zext_ln35_fu_579_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_address1 <= zext_ln20_fu_428_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= zext_ln17_fu_372_p1(8 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state3, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= reg_307;

    A_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, icmp_ln18_reg_756_pp0_iter1_reg)
    begin
        if (((icmp_ln18_reg_756_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(B_addr_reg_703, B_addr_2_reg_795, ap_CS_fsm_state31, zext_ln30_fu_521_p1, ap_CS_fsm_state45, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            B_address0 <= zext_ln30_fu_521_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            B_address0 <= B_addr_2_reg_795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            B_address0 <= B_addr_reg_703;
        else 
            B_address0 <= "XXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state45, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= reg_307;

    B_we0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, zext_ln30_reg_818, ap_CS_fsm_state46, X_addr_reg_844, ap_CS_fsm_state75, ap_block_pp1_stage0, col_1_cast4_fu_560_p1, ap_block_pp1_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            X_address0 <= X_addr_reg_844;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            X_address0 <= col_1_cast4_fu_560_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            X_address0 <= zext_ln30_reg_818(4 - 1 downto 0);
        else 
            X_address0 <= "XXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state46, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_d0_assign_proc : process(B_q0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state46, ap_CS_fsm_state75, bitcast_ln35_2_fu_622_p1, ap_block_pp1_stage1, bitcast_ln37_1_fu_652_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            X_d0 <= bitcast_ln37_1_fu_652_p1;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            X_d0 <= bitcast_ln35_2_fu_622_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            X_d0 <= B_q0;
        else 
            X_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state46, icmp_ln33_reg_855_pp1_iter1_reg, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state46) or ((icmp_ln33_reg_855_pp1_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            X_we0 <= ap_const_logic_1;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_fu_387_p2 <= std_logic_vector(unsigned(indvars_iv28_reg_199) + unsigned(ap_const_lv5_1));
    add_ln15_1_fu_492_p2 <= std_logic_vector(unsigned(row_1_reg_223) + unsigned(ap_const_lv5_1));
    add_ln15_fu_322_p2 <= std_logic_vector(unsigned(norm_reg_211) + unsigned(ap_const_lv4_1));
    add_ln18_fu_476_p2 <= std_logic_vector(unsigned(col_2_reg_234) + unsigned(ap_const_lv64_1));
    add_ln20_1_fu_442_p2 <= std_logic_vector(unsigned(empty_11_fu_419_p1) + unsigned(shl_ln_reg_751));
    add_ln20_fu_423_p2 <= std_logic_vector(unsigned(empty_11_fu_419_p1) + unsigned(tmp_2_reg_698));
    add_ln30_fu_632_p2 <= std_logic_vector(unsigned(row_reg_244) + unsigned(ap_const_lv5_1F));
    add_ln33_fu_616_p2 <= std_logic_vector(unsigned(col_1_reg_256) + unsigned(ap_const_lv63_7FFFFFFFFFFFFFFF));
    add_ln35_fu_574_p2 <= std_logic_vector(unsigned(empty_16_fu_570_p1) + unsigned(tmp_4_reg_849));
    add_ln37_fu_638_p2 <= std_logic_vector(unsigned(tmp_4_reg_849) + unsigned(zext_ln30_1_reg_834));
    add_ln_fu_364_p3 <= (trunc_ln17_fu_360_p1 & norm_reg_211);
    addr_cmp17_fu_587_p2 <= "1" when (reuse_addr_reg14_fu_78 = col_1_cast4_fu_560_p1) else "0";
    addr_cmp_fu_436_p2 <= "1" when (reuse_addr_reg_fu_86 = zext_ln20_fu_428_p1) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(44);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(45);
    ap_CS_fsm_pp1_stage11 <= ap_CS_fsm(55);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(46);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(47);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(49);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(50);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(41);
    ap_CS_fsm_state45 <= ap_CS_fsm(42);
    ap_CS_fsm_state46 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state61 <= ap_CS_fsm(56);
    ap_CS_fsm_state62 <= ap_CS_fsm(57);
    ap_CS_fsm_state63 <= ap_CS_fsm(58);
    ap_CS_fsm_state74 <= ap_CS_fsm(69);
    ap_CS_fsm_state75 <= ap_CS_fsm(70);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp1_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp1_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp1_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp1_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state17_assign_proc : process(icmp_ln18_fu_413_p2)
    begin
        if ((icmp_ln18_fu_413_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state50_assign_proc : process(icmp_ln33_reg_855)
    begin
        if ((icmp_ln33_reg_855 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state50 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state45, tmp_1_fu_513_p3)
    begin
        if (((tmp_1_fu_513_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_1_phi_fu_260_p4_assign_proc : process(col_1_reg_256, icmp_ln33_reg_855, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, add_ln33_reg_889, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln33_reg_855 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_col_1_phi_fu_260_p4 <= add_ln33_reg_889;
        else 
            ap_phi_mux_col_1_phi_fu_260_p4 <= col_1_reg_256;
        end if; 
    end process;


    ap_phi_mux_col_2_phi_fu_237_p4_assign_proc : process(col_2_reg_234, icmp_ln18_reg_756, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln18_reg_790, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_col_2_phi_fu_237_p4 <= add_ln18_reg_790;
        else 
            ap_phi_mux_col_2_phi_fu_237_p4 <= col_2_reg_234;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45, tmp_1_fu_513_p3)
    begin
        if (((tmp_1_fu_513_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_reuse_reg13_load_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, icmp_ln33_reg_855_pp1_iter1_reg, reuse_reg13_fu_82, bitcast_ln35_2_fu_622_p1, ap_block_pp1_stage1)
    begin
        if (((icmp_ln33_reg_855_pp1_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            ap_sig_allocacmp_reuse_reg13_load <= bitcast_ln35_2_fu_622_p1;
        else 
            ap_sig_allocacmp_reuse_reg13_load <= reuse_reg13_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_reuse_reg_load_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln18_reg_756_pp0_iter1_reg, reuse_reg_fu_90, bitcast_ln20_2_fu_482_p1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln18_reg_756_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_sig_allocacmp_reuse_reg_load <= bitcast_ln20_2_fu_482_p1;
        else 
            ap_sig_allocacmp_reuse_reg_load <= reuse_reg_fu_90;
        end if; 
    end process;

    bitcast_ln17_1_fu_398_p1 <= A_load_1_reg_731;
    bitcast_ln17_fu_393_p1 <= reg_292;
    bitcast_ln20_1_fu_471_p1 <= reg_292;
    bitcast_ln20_2_fu_482_p1 <= reg_307;
    bitcast_ln20_fu_467_p1 <= reuse_select_reg_775;
    bitcast_ln22_1_fu_503_p1 <= reg_312;
    bitcast_ln22_fu_498_p1 <= reg_312;
    bitcast_ln32_fu_544_p1 <= B_q0;
    bitcast_ln35_1_fu_612_p1 <= reuse_select18_reg_874;
    bitcast_ln35_2_fu_622_p1 <= reg_307;
    bitcast_ln35_fu_607_p1 <= reg_292;
    bitcast_ln37_1_fu_652_p1 <= reg_297;
    bitcast_ln37_fu_647_p1 <= reg_292;
    col_1_cast4_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_1_phi_fu_260_p4),64));
    empty_11_fu_419_p1 <= ap_phi_mux_col_2_phi_fu_237_p4(8 - 1 downto 0);
    empty_13_fu_548_p1 <= row_reg_244(4 - 1 downto 0);
    empty_16_fu_570_p1 <= ap_phi_mux_col_1_phi_fu_260_p4(8 - 1 downto 0);

    grp_fu_278_p0_assign_proc : process(empty_14_reg_268, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, bitcast_ln20_1_fu_471_p1, ap_CS_fsm_pp0_stage6, bitcast_ln22_1_fu_503_p1, ap_CS_fsm_state37, ap_block_pp0_stage6, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage6))) then 
            grp_fu_278_p0 <= empty_14_reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_278_p0 <= bitcast_ln22_1_fu_503_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_278_p0 <= bitcast_ln20_1_fu_471_p1;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, bitcast_ln20_fu_467_p1, ap_CS_fsm_pp0_stage2, bitcast_ln22_fu_498_p1, ap_CS_fsm_state33, bitcast_ln35_fu_607_p1, ap_CS_fsm_pp1_stage2, ap_block_pp0_stage2, ap_block_pp1_stage2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_283_p0 <= bitcast_ln35_fu_607_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_283_p0 <= bitcast_ln22_fu_498_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_283_p0 <= bitcast_ln20_fu_467_p1;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, reg_297, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state33, ap_CS_fsm_pp1_stage2, bitcast_ln35_1_fu_612_p1, ap_block_pp0_stage2, ap_block_pp1_stage2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_283_p1 <= bitcast_ln35_1_fu_612_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_283_p1 <= reg_297;
        else 
            grp_fu_283_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_287_p0_assign_proc : process(empty_14_reg_268, bitcast_ln17_fu_393_p1, ap_CS_fsm_state5, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_287_p0 <= empty_14_reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_287_p0 <= bitcast_ln17_fu_393_p1;
        else 
            grp_fu_287_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_287_p1_assign_proc : process(ap_CS_fsm_state5, bitcast_ln17_1_fu_398_p1, bitcast_ln37_fu_647_p1, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_287_p1 <= bitcast_ln37_fu_647_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_287_p1 <= bitcast_ln17_1_fu_398_p1;
        else 
            grp_fu_287_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln13_fu_316_p2 <= "1" when (norm_reg_211 = ap_const_lv4_F) else "0";
    icmp_ln15_fu_354_p2 <= "1" when (row_1_reg_223 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_413_p2 <= "1" when (ap_phi_mux_col_2_phi_fu_237_p4 = ap_const_lv64_10) else "0";
    icmp_ln33_fu_565_p2 <= "1" when (unsigned(ap_phi_mux_col_1_phi_fu_260_p4) > unsigned(zext_ln30_2_reg_829)) else "0";
    reuse_select18_fu_600_p3 <= 
        ap_sig_allocacmp_reuse_reg13_load when (addr_cmp17_reg_869(0) = '1') else 
        X_q0;
    reuse_select_fu_460_p3 <= 
        ap_sig_allocacmp_reuse_reg_load when (addr_cmp_reg_765(0) = '1') else 
        A_q1;
    shl_ln_fu_406_p3 <= (trunc_ln17_reg_716 & ap_const_lv4_0);
    tmp_1_fu_513_p3 <= row_reg_244(4 downto 4);
    tmp_2_fu_333_p3 <= (norm_reg_211 & ap_const_lv4_0);
    tmp_4_fu_552_p3 <= (empty_13_fu_548_p1 & ap_const_lv4_0);
    tmp_fu_341_p3 <= (norm_reg_211 & norm_reg_211);
    trunc_ln17_fu_360_p1 <= row_1_reg_223(4 - 1 downto 0);
    zext_ln13_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(norm_reg_211),64));
    zext_ln15_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_reg_223),64));
    zext_ln17_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_364_p3),64));
    zext_ln20_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_1_fu_442_p2),64));
    zext_ln20_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_423_p2),64));
    zext_ln22_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_341_p3),64));
    zext_ln30_1_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_244),8));
    zext_ln30_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_244),63));
    zext_ln30_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_244),64));
    zext_ln35_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_574_p2),64));
    zext_ln37_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_638_p2),64));
end behav;
