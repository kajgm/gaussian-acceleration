// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gauss_gauss,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.350000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.342000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1385,HLS_SYN_LUT=1402,HLS_VERSION=2020_2}" *)

module gauss (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0,
        X_address0,
        X_ce0,
        X_we0,
        X_d0,
        X_q0
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_state12 = 71'd2048;
parameter    ap_ST_fsm_state13 = 71'd4096;
parameter    ap_ST_fsm_state14 = 71'd8192;
parameter    ap_ST_fsm_state15 = 71'd16384;
parameter    ap_ST_fsm_state16 = 71'd32768;
parameter    ap_ST_fsm_pp0_stage0 = 71'd65536;
parameter    ap_ST_fsm_pp0_stage1 = 71'd131072;
parameter    ap_ST_fsm_pp0_stage2 = 71'd262144;
parameter    ap_ST_fsm_pp0_stage3 = 71'd524288;
parameter    ap_ST_fsm_pp0_stage4 = 71'd1048576;
parameter    ap_ST_fsm_pp0_stage5 = 71'd2097152;
parameter    ap_ST_fsm_pp0_stage6 = 71'd4194304;
parameter    ap_ST_fsm_pp0_stage7 = 71'd8388608;
parameter    ap_ST_fsm_pp0_stage8 = 71'd16777216;
parameter    ap_ST_fsm_pp0_stage9 = 71'd33554432;
parameter    ap_ST_fsm_pp0_stage10 = 71'd67108864;
parameter    ap_ST_fsm_pp0_stage11 = 71'd134217728;
parameter    ap_ST_fsm_state31 = 71'd268435456;
parameter    ap_ST_fsm_state32 = 71'd536870912;
parameter    ap_ST_fsm_state33 = 71'd1073741824;
parameter    ap_ST_fsm_state34 = 71'd2147483648;
parameter    ap_ST_fsm_state35 = 71'd4294967296;
parameter    ap_ST_fsm_state36 = 71'd8589934592;
parameter    ap_ST_fsm_state37 = 71'd17179869184;
parameter    ap_ST_fsm_state38 = 71'd34359738368;
parameter    ap_ST_fsm_state39 = 71'd68719476736;
parameter    ap_ST_fsm_state40 = 71'd137438953472;
parameter    ap_ST_fsm_state41 = 71'd274877906944;
parameter    ap_ST_fsm_state42 = 71'd549755813888;
parameter    ap_ST_fsm_state43 = 71'd1099511627776;
parameter    ap_ST_fsm_state44 = 71'd2199023255552;
parameter    ap_ST_fsm_state45 = 71'd4398046511104;
parameter    ap_ST_fsm_state46 = 71'd8796093022208;
parameter    ap_ST_fsm_pp1_stage0 = 71'd17592186044416;
parameter    ap_ST_fsm_pp1_stage1 = 71'd35184372088832;
parameter    ap_ST_fsm_pp1_stage2 = 71'd70368744177664;
parameter    ap_ST_fsm_pp1_stage3 = 71'd140737488355328;
parameter    ap_ST_fsm_pp1_stage4 = 71'd281474976710656;
parameter    ap_ST_fsm_pp1_stage5 = 71'd562949953421312;
parameter    ap_ST_fsm_pp1_stage6 = 71'd1125899906842624;
parameter    ap_ST_fsm_pp1_stage7 = 71'd2251799813685248;
parameter    ap_ST_fsm_pp1_stage8 = 71'd4503599627370496;
parameter    ap_ST_fsm_pp1_stage9 = 71'd9007199254740992;
parameter    ap_ST_fsm_pp1_stage10 = 71'd18014398509481984;
parameter    ap_ST_fsm_pp1_stage11 = 71'd36028797018963968;
parameter    ap_ST_fsm_state61 = 71'd72057594037927936;
parameter    ap_ST_fsm_state62 = 71'd144115188075855872;
parameter    ap_ST_fsm_state63 = 71'd288230376151711744;
parameter    ap_ST_fsm_state64 = 71'd576460752303423488;
parameter    ap_ST_fsm_state65 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state66 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state67 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state68 = 71'd9223372036854775808;
parameter    ap_ST_fsm_state69 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state70 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state71 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state72 = 71'd147573952589676412928;
parameter    ap_ST_fsm_state73 = 71'd295147905179352825856;
parameter    ap_ST_fsm_state74 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state75 = 71'd1180591620717411303424;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [7:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [3:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
input  [31:0] B_q0;
output  [3:0] X_address0;
output   X_ce0;
output   X_we0;
output  [31:0] X_d0;
input  [31:0] X_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] A_address0;
reg A_ce0;
reg A_we0;
reg[7:0] A_address1;
reg A_ce1;
reg[3:0] B_address0;
reg B_ce0;
reg B_we0;
reg[3:0] X_address0;
reg X_ce0;
reg X_we0;
reg[31:0] X_d0;

(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] col_2_reg_234;
reg   [62:0] col_1_reg_256;
reg   [31:0] empty_14_reg_268;
reg   [31:0] reg_292;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state18_pp0_stage1_iter0;
wire    ap_block_state30_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln18_reg_756;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state48_pp1_stage1_iter0;
wire    ap_block_state60_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln33_reg_855;
wire    ap_CS_fsm_state62;
wire   [31:0] grp_fu_287_p2;
reg   [31:0] reg_297;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state74;
wire   [31:0] grp_fu_283_p2;
reg   [31:0] reg_302;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state22_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_state52_pp1_stage5_iter0;
wire    ap_block_pp1_stage5_11001;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] reg_307;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state17_pp0_stage0_iter0;
wire    ap_block_state29_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state47_pp1_stage0_iter0;
wire    ap_block_state59_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [31:0] reg_312;
wire    ap_CS_fsm_state32;
wire   [3:0] add_ln15_fu_322_p2;
reg   [3:0] add_ln15_reg_688;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln13_fu_328_p1;
reg   [63:0] zext_ln13_reg_693;
wire   [0:0] icmp_ln13_fu_316_p2;
wire   [7:0] tmp_2_fu_333_p3;
reg   [7:0] tmp_2_reg_698;
reg   [3:0] B_addr_reg_703;
reg   [7:0] A_addr_reg_708;
wire   [3:0] trunc_ln17_fu_360_p1;
reg   [3:0] trunc_ln17_reg_716;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln15_fu_354_p2;
wire   [4:0] add_ln13_fu_387_p2;
reg   [31:0] A_load_1_reg_731;
wire   [31:0] bitcast_ln17_fu_393_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] bitcast_ln17_1_fu_398_p1;
wire   [63:0] zext_ln15_fu_402_p1;
reg   [63:0] zext_ln15_reg_746;
wire   [7:0] shl_ln_fu_406_p3;
reg   [7:0] shl_ln_reg_751;
wire   [0:0] icmp_ln18_fu_413_p2;
reg   [0:0] icmp_ln18_reg_756_pp0_iter1_reg;
wire   [0:0] addr_cmp_fu_436_p2;
reg   [0:0] addr_cmp_reg_765;
reg   [7:0] A_addr_5_reg_770;
reg   [7:0] A_addr_5_reg_770_pp0_iter1_reg;
wire   [31:0] reuse_select_fu_460_p3;
reg   [31:0] reuse_select_reg_775;
wire   [31:0] bitcast_ln20_fu_467_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state19_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] bitcast_ln20_1_fu_471_p1;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state23_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [63:0] add_ln18_fu_476_p2;
reg   [63:0] add_ln18_reg_790;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state28_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [3:0] B_addr_2_reg_795;
wire    ap_CS_fsm_state31;
wire   [4:0] add_ln15_1_fu_492_p2;
reg   [4:0] add_ln15_1_reg_800;
wire   [31:0] bitcast_ln22_fu_498_p1;
wire    ap_CS_fsm_state33;
wire   [31:0] bitcast_ln22_1_fu_503_p1;
wire    ap_CS_fsm_state37;
wire   [63:0] zext_ln30_fu_521_p1;
reg   [63:0] zext_ln30_reg_818;
wire    ap_CS_fsm_state45;
wire   [0:0] tmp_1_fu_513_p3;
wire   [62:0] zext_ln30_2_fu_536_p1;
reg   [62:0] zext_ln30_2_reg_829;
wire    ap_CS_fsm_state46;
wire   [7:0] zext_ln30_1_fu_540_p1;
reg   [7:0] zext_ln30_1_reg_834;
wire   [31:0] bitcast_ln32_fu_544_p1;
reg   [3:0] X_addr_reg_844;
wire   [7:0] tmp_4_fu_552_p3;
reg   [7:0] tmp_4_reg_849;
wire   [0:0] icmp_ln33_fu_565_p2;
reg   [0:0] icmp_ln33_reg_855_pp1_iter1_reg;
wire   [0:0] addr_cmp17_fu_587_p2;
reg   [0:0] addr_cmp17_reg_869;
wire   [31:0] reuse_select18_fu_600_p3;
reg   [31:0] reuse_select18_reg_874;
wire   [31:0] bitcast_ln35_fu_607_p1;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state49_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
wire   [31:0] bitcast_ln35_1_fu_612_p1;
wire   [62:0] add_ln33_fu_616_p2;
reg   [62:0] add_ln33_reg_889;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_state58_pp1_stage11_iter0;
wire    ap_block_pp1_stage11_11001;
wire   [4:0] add_ln30_fu_632_p2;
reg   [4:0] add_ln30_reg_894;
wire    ap_CS_fsm_state61;
wire   [31:0] bitcast_ln37_fu_647_p1;
wire    ap_CS_fsm_state63;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state17;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state50_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_subdone;
reg    ap_condition_pp1_exit_iter0_state50;
wire    ap_block_pp1_stage11_subdone;
reg   [4:0] indvars_iv28_reg_199;
reg   [3:0] norm_reg_211;
reg   [4:0] row_1_reg_223;
wire    ap_CS_fsm_state44;
reg   [63:0] ap_phi_mux_col_2_phi_fu_237_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] row_reg_244;
wire    ap_CS_fsm_state75;
reg   [62:0] ap_phi_mux_col_1_phi_fu_260_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln22_fu_349_p1;
wire   [63:0] zext_ln17_fu_372_p1;
wire   [63:0] zext_ln20_fu_428_p1;
wire   [63:0] zext_ln20_1_fu_447_p1;
wire   [63:0] zext_ln35_fu_579_p1;
wire   [63:0] col_1_cast4_fu_560_p1;
wire   [63:0] zext_ln37_fu_642_p1;
reg   [63:0] reuse_addr_reg14_fu_78;
reg   [31:0] reuse_reg13_fu_82;
wire   [31:0] bitcast_ln35_2_fu_622_p1;
reg   [31:0] ap_sig_allocacmp_reuse_reg13_load;
wire    ap_block_pp1_stage1;
reg   [63:0] reuse_addr_reg_fu_86;
reg   [31:0] reuse_reg_fu_90;
wire   [31:0] bitcast_ln20_2_fu_482_p1;
reg   [31:0] ap_sig_allocacmp_reuse_reg_load;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state35;
wire   [31:0] bitcast_ln37_1_fu_652_p1;
reg   [31:0] grp_fu_278_p0;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
reg   [31:0] grp_fu_283_p0;
reg   [31:0] grp_fu_283_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp1_stage2;
reg   [31:0] grp_fu_287_p0;
reg   [31:0] grp_fu_287_p1;
wire   [7:0] tmp_fu_341_p3;
wire   [7:0] add_ln_fu_364_p3;
wire   [7:0] empty_11_fu_419_p1;
wire   [7:0] add_ln20_fu_423_p2;
wire   [7:0] add_ln20_1_fu_442_p2;
wire    ap_block_pp0_stage11;
wire   [3:0] empty_13_fu_548_p1;
wire   [7:0] empty_16_fu_570_p1;
wire   [7:0] add_ln35_fu_574_p2;
wire    ap_block_pp1_stage11;
wire   [7:0] add_ln37_fu_638_p2;
reg   [70:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state20_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state21_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state24_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_state25_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_state26_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_state27_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage10_11001;
wire    ap_block_pp1_stage0_subdone;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_11001;
wire    ap_block_state51_pp1_stage4_iter0;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_pp1_stage4_11001;
wire    ap_block_pp1_stage5_subdone;
wire    ap_block_state53_pp1_stage6_iter0;
wire    ap_block_pp1_stage6_subdone;
wire    ap_block_pp1_stage6_11001;
wire    ap_block_state54_pp1_stage7_iter0;
wire    ap_block_pp1_stage7_subdone;
wire    ap_block_pp1_stage7_11001;
wire    ap_block_state55_pp1_stage8_iter0;
wire    ap_block_pp1_stage8_subdone;
wire    ap_block_pp1_stage8_11001;
wire    ap_block_state56_pp1_stage9_iter0;
wire    ap_block_pp1_stage9_subdone;
wire    ap_block_pp1_stage9_11001;
wire    ap_block_state57_pp1_stage10_iter0;
wire    ap_block_pp1_stage10_subdone;
wire    ap_block_pp1_stage10_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

gauss_fsub_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_278_p0),
    .din1(reg_302),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

gauss_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_283_p0),
    .din1(grp_fu_283_p1),
    .ce(1'b1),
    .dout(grp_fu_283_p2)
);

gauss_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_287_p0),
    .din1(grp_fu_287_p1),
    .ce(1'b1),
    .dout(grp_fu_287_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage11) & (1'b0 == ap_block_pp1_stage11_subdone)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        col_1_reg_256 <= 63'd15;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln33_reg_855 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        col_1_reg_256 <= add_ln33_reg_889;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        col_2_reg_234 <= zext_ln13_reg_693;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_2_reg_234 <= add_ln18_reg_790;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        empty_14_reg_268 <= bitcast_ln32_fu_544_p1;
    end else if (((icmp_ln33_reg_855_pp1_iter1_reg == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        empty_14_reg_268 <= reg_307;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv28_reg_199 <= 5'd1;
    end else if (((icmp_ln15_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv28_reg_199 <= add_ln13_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        norm_reg_211 <= 4'd0;
    end else if (((icmp_ln15_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        norm_reg_211 <= add_ln15_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_292 <= A_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln33_reg_855 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_292 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_513_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        reuse_addr_reg14_fu_78 <= 64'd18446744073709551615;
    end else if (((icmp_ln33_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        reuse_addr_reg14_fu_78 <= zext_ln30_reg_818;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        reuse_addr_reg_fu_86 <= 64'd18446744073709551615;
    end else if (((icmp_ln18_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        reuse_addr_reg_fu_86 <= zext_ln20_1_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_513_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        reuse_reg13_fu_82 <= 32'd0;
    end else if (((icmp_ln33_reg_855_pp1_iter1_reg == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        reuse_reg13_fu_82 <= bitcast_ln35_2_fu_622_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        reuse_reg_fu_90 <= 32'd0;
    end else if (((icmp_ln18_reg_756_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        reuse_reg_fu_90 <= bitcast_ln20_2_fu_482_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_1_reg_223 <= indvars_iv28_reg_199;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        row_1_reg_223 <= add_ln15_1_reg_800;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_reg_244 <= 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        row_reg_244 <= add_ln30_reg_894;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_addr_5_reg_770 <= zext_ln20_1_fu_447_p1;
        addr_cmp_reg_765 <= addr_cmp_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_addr_5_reg_770_pp0_iter1_reg <= A_addr_5_reg_770;
        icmp_ln18_reg_756 <= icmp_ln18_fu_413_p2;
        icmp_ln18_reg_756_pp0_iter1_reg <= icmp_ln18_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        A_addr_reg_708 <= zext_ln22_fu_349_p1;
        B_addr_reg_703 <= zext_ln13_fu_328_p1;
        tmp_2_reg_698[7 : 4] <= tmp_2_fu_333_p3[7 : 4];
        zext_ln13_reg_693[3 : 0] <= zext_ln13_fu_328_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_load_1_reg_731 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        B_addr_2_reg_795 <= zext_ln15_reg_746;
        add_ln15_1_reg_800 <= add_ln15_1_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        X_addr_reg_844 <= zext_ln30_reg_818;
        tmp_4_reg_849[7 : 4] <= tmp_4_fu_552_p3[7 : 4];
        zext_ln30_1_reg_834[4 : 0] <= zext_ln30_1_fu_540_p1[4 : 0];
        zext_ln30_2_reg_829[4 : 0] <= zext_ln30_2_fu_536_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln15_reg_688 <= add_ln15_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln18_reg_790 <= add_ln18_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        add_ln30_reg_894 <= add_ln30_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage11) & (icmp_ln33_reg_855 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage11_11001))) begin
        add_ln33_reg_889 <= add_ln33_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        addr_cmp17_reg_869 <= addr_cmp17_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln33_reg_855 <= icmp_ln33_fu_565_p2;
        icmp_ln33_reg_855_pp1_iter1_reg <= icmp_ln33_reg_855;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_297 <= grp_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln33_reg_855 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_302 <= grp_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln33_reg_855 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_307 <= grp_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state36))) begin
        reg_312 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln33_reg_855 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        reuse_select18_reg_874 <= reuse_select18_fu_600_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        reuse_select_reg_775 <= reuse_select_fu_460_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        shl_ln_reg_751[7 : 4] <= shl_ln_fu_406_p3[7 : 4];
        zext_ln15_reg_746[4 : 0] <= zext_ln15_fu_402_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln17_reg_716 <= trunc_ln17_fu_360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_513_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        zext_ln30_reg_818[4 : 0] <= zext_ln30_fu_521_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        A_address0 = zext_ln37_fu_642_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_address0 = A_addr_5_reg_770_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_address0 = zext_ln20_1_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = A_addr_reg_708;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        A_address1 = zext_ln35_fu_579_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_address1 = zext_ln20_fu_428_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = zext_ln17_fu_372_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_756_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        B_address0 = zext_ln30_fu_521_p1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state44))) begin
        B_address0 = B_addr_2_reg_795;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        B_address0 = B_addr_reg_703;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state31))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        X_address0 = X_addr_reg_844;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        X_address0 = col_1_cast4_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        X_address0 = zext_ln30_reg_818;
    end else begin
        X_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state46) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        X_ce0 = 1'b1;
    end else begin
        X_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        X_d0 = bitcast_ln37_1_fu_652_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        X_d0 = bitcast_ln35_2_fu_622_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        X_d0 = B_q0;
    end else begin
        X_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state46) | ((icmp_ln33_reg_855_pp1_iter1_reg == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        X_we0 = 1'b1;
    end else begin
        X_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_413_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln33_reg_855 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_513_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln33_reg_855 == 1'd1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_col_1_phi_fu_260_p4 = add_ln33_reg_889;
    end else begin
        ap_phi_mux_col_1_phi_fu_260_p4 = col_1_reg_256;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_756 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_col_2_phi_fu_237_p4 = add_ln18_reg_790;
    end else begin
        ap_phi_mux_col_2_phi_fu_237_p4 = col_2_reg_234;
    end
end

always @ (*) begin
    if (((tmp_1_fu_513_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_855_pp1_iter1_reg == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        ap_sig_allocacmp_reuse_reg13_load = bitcast_ln35_2_fu_622_p1;
    end else begin
        ap_sig_allocacmp_reuse_reg13_load = reuse_reg13_fu_82;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_756_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_sig_allocacmp_reuse_reg_load = bitcast_ln20_2_fu_482_p1;
    end else begin
        ap_sig_allocacmp_reuse_reg_load = reuse_reg_fu_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6))) begin
        grp_fu_278_p0 = empty_14_reg_268;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_278_p0 = bitcast_ln22_1_fu_503_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_278_p0 = bitcast_ln20_1_fu_471_p1;
    end else begin
        grp_fu_278_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_283_p0 = bitcast_ln35_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_283_p0 = bitcast_ln22_fu_498_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_283_p0 = bitcast_ln20_fu_467_p1;
    end else begin
        grp_fu_283_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_283_p1 = bitcast_ln35_1_fu_612_p1;
    end else if (((1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_283_p1 = reg_297;
    end else begin
        grp_fu_283_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_287_p0 = empty_14_reg_268;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_287_p0 = bitcast_ln17_fu_393_p1;
    end else begin
        grp_fu_287_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_287_p1 = bitcast_ln37_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_287_p1 = bitcast_ln17_1_fu_398_p1;
    end else begin
        grp_fu_287_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln15_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln18_fu_413_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln18_fu_413_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state45 : begin
            if (((tmp_1_fu_513_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((~((icmp_ln33_reg_855 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3_subdone)) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else if (((icmp_ln33_reg_855 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = reg_307;

assign B_d0 = reg_307;

assign add_ln13_fu_387_p2 = (indvars_iv28_reg_199 + 5'd1);

assign add_ln15_1_fu_492_p2 = (row_1_reg_223 + 5'd1);

assign add_ln15_fu_322_p2 = (norm_reg_211 + 4'd1);

assign add_ln18_fu_476_p2 = (col_2_reg_234 + 64'd1);

assign add_ln20_1_fu_442_p2 = (empty_11_fu_419_p1 + shl_ln_reg_751);

assign add_ln20_fu_423_p2 = (empty_11_fu_419_p1 + tmp_2_reg_698);

assign add_ln30_fu_632_p2 = ($signed(row_reg_244) + $signed(5'd31));

assign add_ln33_fu_616_p2 = ($signed(col_1_reg_256) + $signed(63'd9223372036854775807));

assign add_ln35_fu_574_p2 = (empty_16_fu_570_p1 + tmp_4_reg_849);

assign add_ln37_fu_638_p2 = (tmp_4_reg_849 + zext_ln30_1_reg_834);

assign add_ln_fu_364_p3 = {{trunc_ln17_fu_360_p1}, {norm_reg_211}};

assign addr_cmp17_fu_587_p2 = ((reuse_addr_reg14_fu_78 == col_1_cast4_fu_560_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_436_p2 = ((reuse_addr_reg_fu_86 == zext_ln20_fu_428_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd70];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp1_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp1_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bitcast_ln17_1_fu_398_p1 = A_load_1_reg_731;

assign bitcast_ln17_fu_393_p1 = reg_292;

assign bitcast_ln20_1_fu_471_p1 = reg_292;

assign bitcast_ln20_2_fu_482_p1 = reg_307;

assign bitcast_ln20_fu_467_p1 = reuse_select_reg_775;

assign bitcast_ln22_1_fu_503_p1 = reg_312;

assign bitcast_ln22_fu_498_p1 = reg_312;

assign bitcast_ln32_fu_544_p1 = B_q0;

assign bitcast_ln35_1_fu_612_p1 = reuse_select18_reg_874;

assign bitcast_ln35_2_fu_622_p1 = reg_307;

assign bitcast_ln35_fu_607_p1 = reg_292;

assign bitcast_ln37_1_fu_652_p1 = reg_297;

assign bitcast_ln37_fu_647_p1 = reg_292;

assign col_1_cast4_fu_560_p1 = ap_phi_mux_col_1_phi_fu_260_p4;

assign empty_11_fu_419_p1 = ap_phi_mux_col_2_phi_fu_237_p4[7:0];

assign empty_13_fu_548_p1 = row_reg_244[3:0];

assign empty_16_fu_570_p1 = ap_phi_mux_col_1_phi_fu_260_p4[7:0];

assign icmp_ln13_fu_316_p2 = ((norm_reg_211 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_354_p2 = ((row_1_reg_223 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_413_p2 = ((ap_phi_mux_col_2_phi_fu_237_p4 == 64'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_565_p2 = ((ap_phi_mux_col_1_phi_fu_260_p4 > zext_ln30_2_reg_829) ? 1'b1 : 1'b0);

assign reuse_select18_fu_600_p3 = ((addr_cmp17_reg_869[0:0] == 1'b1) ? ap_sig_allocacmp_reuse_reg13_load : X_q0);

assign reuse_select_fu_460_p3 = ((addr_cmp_reg_765[0:0] == 1'b1) ? ap_sig_allocacmp_reuse_reg_load : A_q1);

assign shl_ln_fu_406_p3 = {{trunc_ln17_reg_716}, {4'd0}};

assign tmp_1_fu_513_p3 = row_reg_244[32'd4];

assign tmp_2_fu_333_p3 = {{norm_reg_211}, {4'd0}};

assign tmp_4_fu_552_p3 = {{empty_13_fu_548_p1}, {4'd0}};

assign tmp_fu_341_p3 = {{norm_reg_211}, {norm_reg_211}};

assign trunc_ln17_fu_360_p1 = row_1_reg_223[3:0];

assign zext_ln13_fu_328_p1 = norm_reg_211;

assign zext_ln15_fu_402_p1 = row_1_reg_223;

assign zext_ln17_fu_372_p1 = add_ln_fu_364_p3;

assign zext_ln20_1_fu_447_p1 = add_ln20_1_fu_442_p2;

assign zext_ln20_fu_428_p1 = add_ln20_fu_423_p2;

assign zext_ln22_fu_349_p1 = tmp_fu_341_p3;

assign zext_ln30_1_fu_540_p1 = row_reg_244;

assign zext_ln30_2_fu_536_p1 = row_reg_244;

assign zext_ln30_fu_521_p1 = row_reg_244;

assign zext_ln35_fu_579_p1 = add_ln35_fu_574_p2;

assign zext_ln37_fu_642_p1 = add_ln37_fu_638_p2;

always @ (posedge ap_clk) begin
    zext_ln13_reg_693[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_2_reg_698[3:0] <= 4'b0000;
    zext_ln15_reg_746[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_751[3:0] <= 4'b0000;
    zext_ln30_reg_818[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_2_reg_829[62:5] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_834[7:5] <= 3'b000;
    tmp_4_reg_849[3:0] <= 4'b0000;
end

endmodule //gauss
